from flask_mail import Mail, Message
from datetime import datetime
import threading
import time
import logging
import os
from flask import current_app
import pytz
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Initialize Flask-Mail
mail = Mail()

# Email recipients from .env
TEST_RECIPIENTS = [
    os.getenv('TEST_EMAIL_1'),
    os.getenv('TEST_EMAIL_2'), 
    os.getenv('TEST_EMAIL_3')
]

def init_mail_service(app):
    """Initialize Flask-Mail with .env configuration"""
    app.config['MAIL_SERVER'] = os.getenv('MAIL_SERVER')
    app.config['MAIL_PORT'] = int(os.getenv('MAIL_PORT', 587))
    app.config['MAIL_USE_TLS'] = os.getenv('MAIL_USE_TLS', 'True').lower() == 'true'
    app.config['MAIL_USERNAME'] = os.getenv('MAIL_USERNAME')
    app.config['MAIL_PASSWORD'] = os.getenv('MAIL_PASSWORD')
    app.config['MAIL_DEFAULT_SENDER'] = os.getenv('MAIL_DEFAULT_SENDER')
    
    mail.init_app(app)
    
    # Configure logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[logging.StreamHandler()]
    )
    
    logging.info("📧 SMTP Service initialized by Subhash")


def send_single_email(to_email, subject, message):
    """Send email to single recipient"""
    try:
        msg = Message(
            subject, 
            sender=current_app.config['MAIL_DEFAULT_SENDER'],
            recipients=[to_email]
        )
        msg.body = message
        mail.send(msg)
        logging.info(f"✅ Email sent successfully to {to_email}")
        return True
    except Exception as e:
        logging.error(f"❌ Failed to send email to {to_email}: {str(e)}")
        return False


def get_current_time():
    """Get current IST time"""
    try:
        ist = pytz.timezone('Asia/Kolkata')
        return datetime.now(ist)
    except:
        return datetime.now()


def send_test_emails():
    """Send test emails to configured recipients"""
    try:
        now = get_current_time()
        current_date = now.strftime('%A, %B %d, %Y')
        current_time = now.strftime('%I:%M %p')
        
        subject = f"SMTP Test Email - {now.strftime('%d/%m/%Y %H:%M')}"
        
        message = f"""Hello!

This is a test email from SMTP Configuration System.

📧 SMTP Testing by: Subhash
📅 Date: {current_date}
🕐 Time: {current_time} IST

✅ SMTP Configuration Status: Working
🌐 Server: {os.getenv('MAIL_SERVER')}
🔧 System: Automated Email Testing

If you receive this email, SMTP configuration is working perfectly!

Best regards,
Subhash
SMTP Testing System

---
Automated test email from Render deployment"""

        success_count = 0
        total_emails = len([email for email in TEST_RECIPIENTS if email])
        
        logging.info(f"📧 Sending test emails to {total_emails} recipients...")
        
        for email in TEST_RECIPIENTS:
            if email:  # Only send to valid email addresses
                if send_single_email(email, subject, message):
                    success_count += 1
                time.sleep(1)  # Small delay between emails
        
        logging.info(f"✅ Test emails completed: {success_count}/{total_emails} sent")
        return success_count
        
    except Exception as e:
        logging.error(f"❌ Error in send_test_emails: {str(e)}")
        return 0


def send_smtp_status_report():
    """Send SMTP status report"""
    try:
        now = get_current_time()
        
        subject = f"📊 SMTP System Status Report - {now.strftime('%d/%m/%Y')}"
        
        message = f"""SMTP Configuration Status Report
Generated by: Subhash

🕐 Report Time: {now.strftime('%Y-%m-%d %H:%M:%S')} IST

📧 SMTP Configuration:
• Server: {os.getenv('MAIL_SERVER')}
• Port: {os.getenv('MAIL_PORT')}
• TLS: {os.getenv('MAIL_USE_TLS')}
• Sender: {os.getenv('MAIL_DEFAULT_SENDER')}

📨 Test Recipients:
• {os.getenv('TEST_EMAIL_1')}
• {os.getenv('TEST_EMAIL_2')}
• {os.getenv('TEST_EMAIL_3')}

✅ System Status: Operational
🌐 Environment: {os.getenv('ENVIRONMENT', 'production')}
👨‍💻 Configured by: Subhash

---
SMTP Testing and Configuration System
Deployed on Render Cloud"""

        success_count = 0
        for email in TEST_RECIPIENTS:
            if email:
                if send_single_email(email, subject, message):
                    success_count += 1
        
        return success_count
        
    except Exception as e:
        logging.error(f"❌ Error sending status report: {str(e)}")
        return 0


def run_daily_smtp_test(app):
    """Run SMTP test every 24 hours - ONLY ONCE PER DAY"""
    logging.info("🚀 SMTP Testing Scheduler started by Subhash")
    
    # Initial delay
    time.sleep(30)
    
    while True:
        try:
            start_time = get_current_time()
            logging.info(f"⏰ Starting daily SMTP test: {start_time.strftime('%Y-%m-%d %H:%M:%S')} IST")
            
            with app.app_context():
                # 🔹 SEND ONLY ONE SET OF EMAILS PER DAY
                test_count = send_test_emails()
            
            end_time = get_current_time()
            duration = (end_time - start_time).total_seconds()
            
            logging.info(f"✅ Daily SMTP test completed in {duration:.1f}s")
            logging.info(f"📧 Emails sent to {test_count} recipients")
            
        except Exception as e:
            logging.error(f"❌ SMTP test error: {str(e)}")
        
        logging.info("😴 Next SMTP test in 24 hours...")
        time.sleep(86400)  # 24 hours


def start_smtp_scheduler(app):
    """Initialize SMTP testing scheduler"""
    try:
        thread = threading.Thread(
            target=run_daily_smtp_test, 
            args=(app,), 
            name="SMTPTestScheduler",
            daemon=True
        )
        thread.start()
        
        logging.info("📬 SMTP Testing Scheduler started successfully!")
        logging.info(f"📧 Test emails will be sent to: {len([e for e in TEST_RECIPIENTS if e])} addresses")
        logging.info("👨‍💻 SMTP System configured by: Subhash")
        
        return True
        
    except Exception as e:
        logging.error(f"❌ Failed to start SMTP scheduler: {str(e)}")
        return False


def get_smtp_health():
    """Get SMTP system health status"""
    active_threads = threading.active_count()
    thread_names = [t.name for t in threading.enumerate()]
    now = get_current_time()
    
    return {
        "status": "healthy" if "SMTPTestScheduler" in thread_names else "unhealthy",
        "smtp_server": os.getenv('MAIL_SERVER'),
        "smtp_port": os.getenv('MAIL_PORT'),
        "configured_by": "Subhash",
        "active_threads": active_threads,
        "scheduler_running": "SMTPTestScheduler" in thread_names,
        "test_recipients": len([e for e in TEST_RECIPIENTS if e]),
        "timestamp": now.strftime('%Y-%m-%d %H:%M:%S IST')
    }